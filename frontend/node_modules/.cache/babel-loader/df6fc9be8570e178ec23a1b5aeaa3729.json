{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_REQUEST } from \"../constants/userConstants\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/devanshi/proshop/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_REQUEST","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","USER_REGISTER_SUCCESS"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,kBAA9C,EAAkEC,WAAlE,EAA+EC,qBAA/E,QAA4G,4BAA5G;AAEA,OAAO,MAAMC,KAAK,GAAE,CAACC,KAAD,EAAOC,QAAP,KAAkB,MAAMC,QAAN,IAAiB;AACnD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACR;AADA,KAAD,CAAR;AAIA,UAAMS,MAAM,GAAC;AACTC,MAAAA,OAAO,EAAC;AACJ,wBAAe;AADX;AADC,KAAb;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAO,MAAMb,KAAK,CAACc,IAAN,CAAW,kBAAX,EAA8B;AAACP,MAAAA,KAAD;AAAOC,MAAAA;AAAP,KAA9B,EAA+CG,MAA/C,CAAnB;AACAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACP,kBADA;AAELY,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAhC;AACH,GAlBD,CAkBE,OAAOO,KAAP,EAAc;AACZX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACT,eADA;AAELc,MAAAA,OAAO,EAACK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GAAgDF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAApE,GAA8EF,KAAK,CAACE;AAFvF,KAAD,CAAR;AAIH;AACJ,CAzBM;AA2BP,OAAO,MAAMC,MAAM,GAAC,MAAKd,QAAD,IAAY;AAChCO,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAf,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACN;AAAN,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMqB,QAAQ,GAAE,CAACC,IAAD,EAAMnB,KAAN,EAAYC,QAAZ,KAAuB,MAAMC,QAAN,IAAiB;AAC3D,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACL;AADA,KAAD,CAAR;AAIA,UAAMM,MAAM,GAAC;AACTC,MAAAA,OAAO,EAAC;AACJ,wBAAe;AADX;AADC,KAAb;AAMA,UAAM;AAACC,MAAAA;AAAD,QAAO,MAAMb,KAAK,CAACc,IAAN,CAAW,YAAX,EAAwB;AAACY,MAAAA,IAAD;AAAMnB,MAAAA,KAAN;AAAYC,MAAAA;AAAZ,KAAxB,EAA8CG,MAA9C,CAAnB;AACAF,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACiB,qBADA;AAELZ,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAhC;AACH,GAlBD,CAkBE,OAAOO,KAAP,EAAc;AACZX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAACT,eADA;AAELc,MAAAA,OAAO,EAACK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GAAgDF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAApE,GAA8EF,KAAK,CAACE;AAFvF,KAAD,CAAR;AAIH;AACJ,CAzBM","sourcesContent":["import axios from \"axios\"\nimport { USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_REQUEST } from \"../constants/userConstants\"\n\nexport const login= (email,password)=>async(dispatch)=>{\n    try {\n        dispatch({\n            type:USER_LOGIN_REQUEST\n        })\n\n        const config={\n            headers:{\n                'Content-Type':'application/json'\n            }\n        }\n\n        const {data}=await axios.post('/api/users/login',{email,password},config)\n        dispatch({\n            type:USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo',JSON.stringify(data))\n    } catch (error) {\n        dispatch({\n            type:USER_LOGIN_FAIL,\n            payload:error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n\nexport const logout=()=>(dispatch)=>{\n    localStorage.removeItem('userInfo')\n    dispatch({type:USER_LOGOUT})\n}\n\nexport const register= (name,email,password)=>async(dispatch)=>{\n    try {\n        dispatch({\n            type:USER_REGISTER_REQUEST,\n        })\n\n        const config={\n            headers:{\n                'Content-Type':'application/json'\n            }\n        }\n\n        const {data}=await axios.post('/api/users',{name,email,password},config)\n        dispatch({\n            type:USER_REGISTER_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo',JSON.stringify(data))\n    } catch (error) {\n        dispatch({\n            type:USER_LOGIN_FAIL,\n            payload:error.response && error.response.data.message ? error.response.data.message : error.message,\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}